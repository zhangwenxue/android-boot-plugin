/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.5/userguide/custom_plugins.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    alias(libs.plugins.jvm)

    // id("com.gradle.plugin-publish") version "1.2.1"

    id("maven-publish")
}

repositories {
    // Use Maven Central for resolving dependencies.
    maven(url = "https://maven.aliyun.com/repository/gradle-plugin")
    maven(url = "https://maven.aliyun.com/repository/public")
    maven(url = "https://maven.aliyun.com/repository/central")
    maven(url = "https://maven.aliyun.com/repository/google")

    google()
    mavenCentral()
    gradlePluginPortal()
}

// The project version will be used as your plugin version when publishing.
version = "1.0.0"
group = "android.boot"
val remoteUrl = "${properties["gradle.publish.remoteurl"]}"
val mavenUserName = "${properties["gradle.publish.username"]}"
val mavenPwd = "${properties["gradle.publish.userpwd"]}"
println("remoteUrl:$remoteUrl\n credentials {\n   username = $mavenUserName \n   password = $mavenPwd \n  }")

afterEvaluate {
    publishing {
        publications {
            create<MavenPublication>("boot") {
                from(components["kotlin"])
                groupId = "android.boot"
                artifactId = "plugin"
                version = version
            }
        }
        repositories {
            maven {
                setUrl(remoteUrl)
                credentials {
                    username = mavenUserName
                    password = mavenPwd
                }
            }
        }
    }
}

// Use java-gradle-plugin to generate plugin descriptors and specify both global and individual plugin properties.
// The names of the blocks inside "plugins" need to be unique, they will identify the plugins being configured.
// All properties are mandatory.
gradlePlugin {
//    website.set("https://github.com/zhangwenxue/android-boot-plugin")
//    vcsUrl.set("https://github.com/zhangwenxue/android-boot-plugin")
    plugins {
        create("androidBoot") {
            id = "android.boot.greeting"
            implementationClass = "android.boot.AndroidBootPlugin"
            displayName = "Gradle Greeting plugin"
            description = "Gradle plugin to say hello!"
//            tags.set(listOf("search", "tags", "for", "your", "hello", "plugin"))
        }
    }
}

testing {
    suites {
        // Configure the built-in test suite
        Suppress("EXPERIMENTAL_API_USAGE")
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("1.9.20")
        }

        // Create a new test suite
        Suppress("EXPERIMENTAL_API_USAGE")
        val functionalTest by registering(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("1.9.20")

            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation(project())
            }

            targets {
                all {
                    // This test suite should run after the built-in test suite has run its tests
                    testTask.configure { shouldRunAfter(test) }
                }
            }
        }
    }
}


gradlePlugin.testSourceSets.add(sourceSets["functionalTest"])

tasks.named<Task>("check") {
    // Include functionalTest as part of the check lifecycle
    dependsOn(testing.suites.named("functionalTest"))
}
